#!/bin/bash

CORS_ALLOWED_ORIGINS=$1
CORS_ALLOW_CREDENTIALS=$2
CORS_ALLOWED_METHODS=$3
CORS_CACHE_PERIOD_MAX_SECONDS=$4
CORS_ALLOWED_HEADERS=$5
CORS_EXPOSE_HEADERS=$6


#echo $CORS_ALLOWED_ORIGINS
#echo $CORS_ALLOW_CREDENTIALS
#echo $CORS_ALLOWED_METHODS
#echo $CORS_CACHE_PERIOD_MAX_SECONDS
#echo $CORS_ALLOWED_HEADERS
#echo $CORS_EXPOSE_HEADERS

CORS_START_STRING="<cors allow-credentials=\\\""
CORS_END_STRING="</cors>"

CORS_ORIGINS_MIDDLE_STRING=""
CORS_ORIGINS_END_STRING="</allowed-origins>"

CORS_METHODS_START_STRING=""
CORS_METHODS_MIDDLE_STRING=""
CORS_METHODS_END_STRING="</allowed-methods>"

CORS_ALLOWED_HEADERS_START_STRING=""
CORS_ALLOWED_HEADERS_MIDDLE_STRING=""
CORS_ALLOWED_HEADERS_END_STRING=""

CORS_EXPOSE_HEADERS_START_STRING=""
CORS_EXPOSE_HEADERS_MIDDLE_STRING=""
CORS_EXPOSE_HEADERS_END_STRING=""
  
  
if [ ${CORS_ALLOW_CREDENTIALS} == "true" ]; then
	CORS_START_STRING+="true\\\"><allowed-origins>"
else
	CORS_START_STRING+="false\\\"><allowed-origins>"
fi
  
# Split the CORS ORIGINS by comma
IFS=',' read -ra CORS_ORGINS <<< "$CORS_ALLOWED_ORIGINS"
  
for ORIGIN in "${CORS_ORGINS[@]}"; do
	CORS_ORIGINS_MIDDLE_STRING+="<origin>$ORIGIN</origin>"
done
  
if [ "${CORS_CACHE_PERIOD_MAX_SECONDS}" != "empty" ]; then
	CORS_METHODS_START_STRING+="<allowed-methods preflight-result-max-age=\\\"${CORS_CACHE_PERIOD_MAX_SECONDS}\\\">"
else
	CORS_METHODS_START_STRING+="<allowed-methods>"
fi

if [ "${CORS_ALLOWED_METHODS}" == "ALL" ]; then
	CORS_METHODS_MIDDLE_STRING+="<method>*</method>"
else
	
	# Split the CORS ORIGINS by comma
	IFS=',' read -ra CORS_METHODS <<< "$CORS_ALLOWED_METHODS"
	
	for METHOD in "${CORS_METHODS[@]}"; do
		CORS_METHODS_MIDDLE_STRING+="<method>$METHOD</method>"
	done
fi
  
if [ "${CORS_ALLOWED_HEADERS}" != "empty" ]; then
    CORS_ALLOWED_HEADERS_START_STRING+="<allowed-headers>"
	CORS_ALLOWED_HEADERS_END_STRING+="</allowed-headers>"
	
	# Split the CORS ALLOWED HEADERS by comma
	IFS=',' read -ra ALLOWED_HEADERS <<< "$CORS_ALLOWED_HEADERS"	
	
	for HEADER in "${ALLOWED_HEADERS[@]}"; do
		CORS_ALLOWED_HEADERS_MIDDLE_STRING+="<header>$HEADER</header>"
	done
fi
  
if [ "${CORS_EXPOSE_HEADERS}" != "empty" ]; then
    CORS_EXPOSE_HEADERS_START_STRING+="<expose-headers>"
	CORS_EXPOSE_HEADERS_END_STRING+="</expose-headers>"
	
	# Split the CORS EXPOSE HEADERS by comma
	IFS=',' read -ra EXPOSE_HEADERS <<< "$CORS_EXPOSE_HEADERS"	
	
	for HEADER in "${EXPOSE_HEADERS[@]}"; do
		CORS_EXPOSE_HEADERS_MIDDLE_STRING+="<header>$HEADER</header>"
	done
fi 
  
CORS_POLICY="$CORS_START_STRING$CORS_ORIGINS_MIDDLE_STRING$CORS_ORIGINS_END_STRING$CORS_METHODS_START_STRING$CORS_METHODS_MIDDLE_STRING$CORS_METHODS_END_STRING$CORS_ALLOWED_HEADERS_START_STRING$CORS_ALLOWED_HEADERS_MIDDLE_STRING$CORS_ALLOWED_HEADERS_END_STRING$CORS_EXPOSE_HEADERS_START_STRING$CORS_EXPOSE_HEADERS_MIDDLE_STRING$CORS_EXPOSE_HEADERS_END_STRING$CORS_END_STRING"
  
# Escape double quotes in the XML string
ESCAPED_CORS_POLICY=${CORS_POLICY//\"/\\\"}

sed -i "s/@CORS_POLICY@/api/g" update-policy.sh
  
# Replace the placeholder with the IP filter addresses using a different delimiter for sed
sed -i "s#@CORS@#${ESCAPED_CORS_POLICY//&/\\&}#g" update-policy.sh 

